# core/heartbeat.py
from __future__ import annotations
import time
from datetime import datetime, timezone
from typing import Optional

from core.db import get_conn
from core.params import get_paused, list_pairs
from core.telemetry import send_event

# –ö–ª—é—á–∏ –≤ bot_runtime
RT_LAST_TICK      = "hb_last_tick"       # –ø–æ—Å–ª–µ–¥–Ω—è—è ¬´–∂–∏–≤–∞—è¬ª –æ—Ç–º–µ—Ç–∫–∞ —Ü–∏–∫–ª–∞ (—Å–µ–∫)
RT_LAST_PING_SENT = "hb_last_ping_sent"  # –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π heartbeat (—Å–µ–∫)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã heartbeat
HEARTBEAT_EVERY_SEC = 60 * 60             # —Ä–∞–∑ –≤ 60 –º–∏–Ω—É—Ç
SILENCE_ALERT_SEC   = int(1.5 * 60 * 60)  # –µ—Å–ª–∏ —Ç–∏—à–∏–Ω–∞ > 90 –º–∏–Ω—É—Ç ‚Äî —à–ª—ë–º –∞–ª–µ—Ä—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

def _is_sqlite_conn(conn) -> bool:
    try:
        return conn.__class__.__module__.startswith("sqlite3")
    except Exception:
        return (not hasattr(conn, "closed")) and hasattr(conn, "execute")

def _rt_get(key: str) -> Optional[int]:
    conn = get_conn()
    cur = conn.cursor()
    try:
        cur.execute("SELECT value FROM bot_runtime WHERE key=%s;" if not _is_sqlite_conn(conn)
                    else "SELECT value FROM bot_runtime WHERE key=?;", (key,))
        row = cur.fetchone()
        if not row:
            return None
        v = row[0] if isinstance(row, (list, tuple)) else row
        try:
            return int(v)
        except Exception:
            return None
    finally:
        try: cur.close()
        except Exception: pass

def _rt_set(key: str, value: int) -> None:
    conn = get_conn()
    is_sqlite = _is_sqlite_conn(conn)
    cur = conn.cursor()
    try:
        if is_sqlite:
            cur.execute("INSERT OR REPLACE INTO bot_runtime(key, value, updated_at) VALUES (?, ?, CURRENT_TIMESTAMP)",
                        (key, str(int(value))))
        else:
            cur.execute(
                "INSERT INTO bot_runtime(key, value) VALUES (%s, %s) "
                "ON CONFLICT (key) DO UPDATE SET value=EXCLUDED.value, updated_at=now()",
                (key, str(int(value)))
            )
    finally:
        try: cur.close()
        except Exception: pass

def _fmt_ts(ts: int) -> str:
    return datetime.fromtimestamp(ts, tz=timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")

def init():
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤–æ—Ä–∫–µ—Ä–∞.
    1) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç ¬´—Ç–∏—à–∏–Ω—É¬ª > SILENCE_ALERT_SEC –∏ —à–ª—ë—Ç alert –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    2) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π heartbeat –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–∫–∞–∫ –∏ –±—ã–ª–æ —É —Ç–µ–±—è —Ä–∞–Ω–µ–µ).
    """
    now = int(time.time())
    last_tick = _rt_get(RT_LAST_TICK)
    if last_tick is not None:
        gap = now - last_tick
        if gap > SILENCE_ALERT_SEC:
            paused = get_paused()
            pairs = list_pairs(include_disabled=False)
            msg = (
                f"<b>–î–æ–ª–≥–∞—è —Ç–∏—à–∏–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞</b>\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: { _fmt_ts(last_tick) }\n"
                f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ç–æ—è: {gap//60} –º–∏–Ω\n"
                f"‚Ä¢ –ü–∞—É–∑–∞: {'–¥–∞' if paused else '–Ω–µ—Ç'}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {len(pairs)}"
            )
            send_event("alert_silence", msg)

    # –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º ¬´–∂–∏–≤–æ–π¬ª —Ç–∏–∫
    _rt_set(RT_LAST_TICK, now)

    # üîî –°—Ç–∞—Ä—Ç–æ–≤—ã–π heartbeat ‚Äî —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ –ø–µ—Ä–≤—É—é –º–∏–Ω—É—Ç—É —Å—Ç–∞—Ä—Ç–∞
    paused = get_paused()
    pairs = list_pairs(include_disabled=False)
    start_msg = (
        f"<b>Heartbeat (startup)</b>\n"
        f"‚Ä¢ –í—Ä–µ–º—è: { _fmt_ts(now) }\n"
        f"‚Ä¢ –ü–∞—É–∑–∞: {'–¥–∞' if paused else '–Ω–µ—Ç'}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {len(pairs)}"
    )
    send_event("heartbeat", start_msg)
    # –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–∏–Ω–≥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ HEARTBEAT_EVERY_SEC
    _rt_set(RT_LAST_PING_SENT, now)

def tick():
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ —Ü–∏–∫–ª (–æ–±—ã—á–Ω–æ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É).
    1) –û–±–Ω–æ–≤–ª—è–µ—Ç ¬´–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∏–∫¬ª.
    2) –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ >= HEARTBEAT_EVERY_SEC —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–∏–Ω–≥–∞ ‚Äî —à–ª—ë—Ç heartbeat.
    """
    now = int(time.time())
    _rt_set(RT_LAST_TICK, now)

    last_sent = _rt_get(RT_LAST_PING_SENT) or 0
    if now - last_sent >= HEARTBEAT_EVERY_SEC:
        paused = get_paused()
        pairs = list_pairs(include_disabled=False)
        msg = (
            f"<b>Heartbeat</b>\n"
            f"‚Ä¢ –í—Ä–µ–º—è: { _fmt_ts(now) }\n"
            f"‚Ä¢ –ü–∞—É–∑–∞: {'–¥–∞' if paused else '–Ω–µ—Ç'}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: {len(pairs)}"
        )
        send_event("heartbeat", msg)
        _rt_set(RT_LAST_PING_SENT, now)
